package commonTests;

import org.junit.Test;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

/**
 * –¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å.
 */
public class CommonTest {

	/**
	 * –í –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤, codePoint –º–æ–≥—É—Ç —Å–æ–≤–ø–∞–¥–∞—Ç—å –≤ code (int –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º char).
	 * –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å–ª—É—á–∞–µ–≤: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (–∫–∏—Ä–∏–ª–ª–∏—Ü–∞, –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã).
	 */
	@Test
	public void commonCasesShouldHaveSameValues() {
		//–ö–∏—Ä–∏–ª–ª–∏—Ü–∞
		String cyrillicString = "–ô–æ–∫–æ–≥–∞–º–∞";
		assertEquals(8, cyrillicString.codePoints().count());
		assertEquals(8, cyrillicString.chars().count());
		//–°–∏–º–≤–æ–ª—ã –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞
		String latinString = "Quick";
		assertEquals(5, latinString.codePoints().count());
		assertEquals(5, latinString.chars().count());
		//–°–æ—Å—Ç–∞–≤–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
		String stringWithCompositeSymbol = "nÃÉ√±";
		assertEquals(3, stringWithCompositeSymbol.codePoints().count());
		assertEquals(3, stringWithCompositeSymbol.chars().count());
		//–û—Å–æ–±–µ–Ω–Ω–∞—è –ø–∏—Å–º–µ–Ω–Ω–æ—Å—Ç—å –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤
		String hindiString = "‡§™‡•ç‡§∞‡•ã‡§ó‡•ç‡§∞‡§æ‡§Æ‡§ø‡§Ç‡§ó";
		assertEquals(12, hindiString.codePoints().count());
		assertEquals(12, hindiString.chars().count());
	}

	@Test
	public void emojiHasDifferentValues() {
		String emojiString = "üëª";
		//–ù–∞ –æ–¥–∏–Ω emojiString –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è 2 —á–∞—Ä–∞ (—Ç.–µ. –Ω–µ –≤–ª–µ–∑–∞–µ—Ç –≤ 16 –±–∏—Ç)
		assertEquals(1, emojiString.codePoints().count());
		assertEquals(2, emojiString.chars().count());
	}

	@Test
	public void shouldCompareStringWithinStringPool() {
		String literalString = "test";
		String anotherLiteralString = "test";
		//–õ–∏—Ç–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Ä–∞–≤–Ω—ã, —Ç.–∫. —ç—Ç–æ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –æ–±—ä–µ–∫—Ç, –æ–¥–Ω–∞ –∏ —Ç–∞ –∂–µ —Å—Å—ã–ª–∫–∞ –≤ –ø—É–ª–µ
		assertTrue(literalString == anotherLiteralString);
		//–û–±—ä–µ–∫—Ç - –Ω–æ–≤—ã–π String –æ–±—ä–µ–∫—Ç, –µ–≥–æ –≤ –ø—É–ª–µ –Ω–µ—Ç
		String constructedString = new String("test");
		//–î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ –ø—É–ª, –ø–æ–ª—É—á–∞–µ–º reference –Ω–∞ —Ç–æ—Ç String, –∫–æ—Ç–æ—Ä—ã–π –≤ –ø—É–ª–µ
		String pooled = constructedString.intern();

		assertTrue(literalString != constructedString);
		assertTrue(literalString == pooled);
		//intern –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π reference –Ω–∞ –æ–±—ä–µ–∫—Ç –∏–∑ –ø—É–ª–∞, —Å—Ç–∞—Ä—ã–π reference –ø–æ –ø—Ä–µ–∂–Ω–µ–º—É –Ω–µ –≤ –ø—É–ª–µ!
		assertTrue(pooled != constructedString);
	}

	@Test
	public void shouldCompareStringAsCharIntValues(){
		String firstString = "Java Core";
		String secondString = "Java Core Epam";
		String thirdString = "Java core Epam";
		assertEquals(-5, firstString.compareTo(secondString));
		assertEquals(-32, secondString.compareTo(thirdString));
	}

}
